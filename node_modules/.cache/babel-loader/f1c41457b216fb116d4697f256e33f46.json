{"ast":null,"code":"import * as Types from \"../constant/index\";\nvar initialState = [];\n\nconst poll = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.GET_DATA_SUCCES:\n      return [...state, action.payload];\n\n    case Types.ADD_POLL_SUCCES:\n      return [state.unshift(action.payload), ...state];\n\n    case Types.ADD_POLL_ITEM_SUCCES:\n      // const index = findIndex(state, parseInt(action.id));\n      console.log(action.payload, action.id);\n\n    default:\n      return state;\n  }\n};\n\nconst findIndex = (arr, id) => {\n  if (arr.length > 0) {\n    for (let i = 0; i <= arr.length; i++) {\n      if (arr[i].id === id) {\n        return i;\n      }\n    }\n  }\n};\n\nexport default poll;","map":{"version":3,"sources":["D:/tranning2/src/redux/reducer/poll-reducer.js"],"names":["Types","initialState","poll","state","action","type","GET_DATA_SUCCES","payload","ADD_POLL_SUCCES","unshift","ADD_POLL_ITEM_SUCCES","console","log","id","findIndex","arr","length","i"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,mBAAvB;AACA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,KAAK,CAACM,eAAX;AACE,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAP;;AACF,SAAKP,KAAK,CAACQ,eAAX;AACE,aAAO,CAACL,KAAK,CAACM,OAAN,CAAcL,MAAM,CAACG,OAArB,CAAD,EAAgC,GAAGJ,KAAnC,CAAP;;AACF,SAAKH,KAAK,CAACU,oBAAX;AACE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACG,OAAnB,EAA4BH,MAAM,CAACS,EAAnC;;AACF;AACE,aAAOV,KAAP;AATJ;AAWD,CAZD;;AAcA,MAAMW,SAAS,GAAG,CAACC,GAAD,EAAMF,EAAN,KAAa;AAC7B,MAAIE,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,GAAG,CAACC,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,UAAIF,GAAG,CAACE,CAAD,CAAH,CAAOJ,EAAP,KAAcA,EAAlB,EAAsB;AACpB,eAAOI,CAAP;AACD;AACF;AACF;AACF,CARD;;AASA,eAAef,IAAf","sourcesContent":["import * as Types from \"../constant/index\";\r\nvar initialState = [];\r\n\r\nconst poll = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Types.GET_DATA_SUCCES:\r\n      return [...state, action.payload];\r\n    case Types.ADD_POLL_SUCCES:\r\n      return [state.unshift(action.payload), ...state];\r\n    case Types.ADD_POLL_ITEM_SUCCES:\r\n      // const index = findIndex(state, parseInt(action.id));\r\n      console.log(action.payload, action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst findIndex = (arr, id) => {\r\n  if (arr.length > 0) {\r\n    for (let i = 0; i <= arr.length; i++) {\r\n      if (arr[i].id === id) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n};\r\nexport default poll;\r\n"]},"metadata":{},"sourceType":"module"}